<<<<<<< HEAD
document.addEventListener('DOMContentLoaded' , (position, string) => {    // Tabs    const tabs = document.querySelectorAll('.tabheader__item'),        tabsContent = document.querySelectorAll('.tabcontent'),        tabsParent = document.querySelector('.tabheader__items');function hideTabContent() {    tabsContent.forEach(item => {        item.classList.add('hide');        item.classList.remove('show', 'fade');    });    tabs.forEach(item => {        item.classList.remove('tabheader__item_active')    });}function showTabContent(i = 0) {    tabsContent[i].classList.add('show', 'fade');    tabsContent[i].classList.remove('hide')    tabs[i].classList.add('tabheader__item_active');}    hideTabContent();    showTabContent(0)tabsParent.addEventListener('click', (event) => {    const target = event.target;    if (target && target.classList.contains('tabheader__item')) {        tabs.forEach((item, i) => {            if (target === item) {                hideTabContent();                showTabContent(i);            }        });    }});    // Timer    const deadline = '2025-03-31';    const promotion = document.querySelector('.promotion__timer')    function getTimeRemaining(endTime){        let days, hours, minutes, seconds;        const t = Date.parse(endTime) - Date.parse(new Date());            if (t <= 0) {                // делаем нули на таймере                days = 0;                hours = 0;                minutes = 0;                seconds = 0;                // делаем секцию невидимой                // promotion.classList.add('hide');            } else {            days = Math.floor(t / (1000 * 60 * 60 * 24))            hours = Math.floor((t / (1000 * 60 * 60) % 24))            minutes = Math.floor((t / 1000 / 60) % 60)            seconds =  Math.floor((t / 1000) % 60);            }        return {            'total': t,            'days': days,            'hours': hours,            'minutes': minutes,            'seconds': seconds        };    }    function getZero(num) {        if (num >= 0 && num < 10) {            return `0${num}`;        } else {            return num;        }    }    function setClock(selector, endTime) {        const timer = document.querySelector(selector),            days = timer.querySelector('#days'),            hours = timer.querySelector('#hours'),            minutes = timer.querySelector('#minutes'),            seconds = timer.querySelector('#seconds'),            timeInterval = setInterval(updateClock, 1000);        updateClock();        function updateClock() {            const t = getTimeRemaining(endTime);            days.textContent = getZero(t.days);            hours.textContent = getZero(t.hours);            minutes.textContent = getZero(t.minutes);            seconds.textContent = getZero(t.seconds);            if (t.total <= 0) {                clearInterval(timeInterval);            }        }    }    setClock('.timer', deadline);    // Modal    const modalTrigger = document.querySelectorAll('[data-modal]'),        modal = document.querySelector('.modal');    function openModal() {        modal.classList.add('show');        modal.classList.remove('hide');        document.body.style.overflow = 'hidden';        clearInterval(modalTimerId);    }    modalTrigger.forEach(btn => {        btn.addEventListener('click', openModal);    });    //чтоб не повторять код можно создать функцию и прописать туда действия    // по закрытию модального окна    function closeModal() {        modal.classList.add('hide');        modal.classList.remove('show');        document.body.style.overflow = '';    }    modal.addEventListener('click', (e) => {        if (e.target === modal || e.target.getAttribute('data-close') === '') {            closeModal();        }    });    //чтобы закрыть модальное окно при нажатии клавиши esc    document.addEventListener('keydown', (e) => {        if (e.code === 'Escape' && modal.classList.contains('show')) {            closeModal();        }    });   // modalCloseBtn.addEventListener('click', () => {    //     modal.classList.add('hide');    //     modal.classList.remove('show');    //     document.body.style.overflow = '';    //    // });    // modal.addEventListener('click', (e) => {    //     if (e.target === modal) {    //         modal.classList.add('hide');    //         modal.classList.remove('show');    //         document.body.style.overflow = '';    //     }    // });    const modalTimerId = setTimeout(openModal, 10000);  //чтобы модальное окно открывалось через 10 сек    function showModalByScroll() {        if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 1) {            openModal()            window.removeEventListener('scroll', showModalByScroll); //чтобы модальное окно открывалось только один раз        }    }    window.addEventListener('scroll', showModalByScroll); //чтобы модальное окно открывалось при скролле до конца страницы    // Используем классы для карточек   class MenuCard {       constructor(src, alt, title, descr, price, parentSelector, ...classes) {           this.src = src;           this.alt = alt;           this.title = title;           this.descr = descr;           this.price = price;           this.classes = classes;           this.parent = document.querySelector(parentSelector);           this.transfer = 24;           this.changePrice();       }       changePrice() {           this.price = this.price * this.transfer;       }       render() {           const element = document.createElement('div');           if (this.classes.length === 0) {               this.element = 'menu__item';               element.classList.add(this.element);           } else {               this.classes.forEach(className => element.classList.add(className));           }           element.innerHTML = `                           <img src=${this.src} alt=${this.alt}>                <h3 class="menu__item-subtitle">${this.title}</h3>                <div class="menu__item-descr">${this.descr}</div>                <div class="menu__item-divider"></div>                <div class="menu__item-price">                    <div class="menu__item-cost">Цена:</div>                    <div class="menu__item-total"><span>${this.price}</span> kc/день</div>                </div>                       `;           this.parent.append(element);       }   }    const getResourse = async (url) => {        const res = await fetch(url);        if (!res.ok) {            throw new Error(`Could not fetch ${url}, status: ${res.status}`);        }        return await res.json();    };   // getResourse('http://localhost:3000/menu')   //     .then(data => {   //         data.forEach(({img, altimg, title, descr, price})=> {   //             new MenuCard(img, altimg, title, descr, price, '.menu__field .container').render();   //         })   // })    axios.get('http://localhost:3000/menu')        .then(data => {             data.data.forEach(({img, altimg, title, descr, price}) => {                new MenuCard(img, altimg, title, descr, price, '.menu__field .container').render();            })        });    // Forms    const forms = document.querySelectorAll('form'); //1 получаем все формы    const message = { // 7 объект с сообщениями валидации и отправки        loading: 'img/form/spinner.svg',        success: 'Спасибо, скоро свяжемся с вами',        failure: 'Что-то пошло не так'    };    forms.forEach(item => { // 9 перебираем все формы и запускаем функцию отправки        bindPostData(item);    })    const postData = async (url, data) => {        const res = await fetch(url, {            method: "POST",            headers: {                'Content-type': 'application/json'            },            body: data        });        return await res.json();    }    function bindPostData(form) { //2 функция отправки данных        form.addEventListener('submit', (e) => { // событие отправки            e.preventDefault(); // отменяем стандартное поведение            let statusMessage = document.createElement('img'); //8 создаем элемент для сообщения валидации            statusMessage.src = message.loading;            statusMessage.style.cssText = `             display: block;             margin: 0 auto;            `;            // добавляем в форму            form.insertAdjacentElement('afterend', statusMessage); // после формы вставляем элемент, statusMessage',);            // request.setRequestHeader('Content-Type', 'multipart/form-data'); // устанавливаем заголовки запроса, но если спользуем XMLHttpRequest то не нужно            const formData = new FormData(form); //4 создаем объект FormData и передаем ему нашу форму            const json = JSON.stringify(Object.fromEntries(formData.entries()));                postData('http://localhost:3000/requests', json)                .then(data => {                console.log(data);                showThanksModal(message.success) ; // добавляем сообщение об успешной отправке                statusMessage.remove();            }).catch(() => {                showThanksModal(message.failure); // добавляем сообщение об ошибке            }).finally(() => {                form.reset(); // очищаем форму после отправки            })        });    }    //создаем модальное окно благодарности после отправки формы    function showThanksModal(message) {        const prevModalDialog = document.querySelector('.modal__dialog');        prevModalDialog.classList.add('hide');        openModal();        const thanksModal = document.createElement('div');        thanksModal.classList.add('modal__dialog');        thanksModal.innerHTML = `            <div class="modal__content">                <div class="modal__close" data-close>&times;</div>                <div class="modal__title">${message}</div>            </div>        `;        document.querySelector('.modal').append(thanksModal); //добавляем модальное окно на страницу        setTimeout(() => {  // удаляем модальное окно через 4 секунды            thanksModal.remove();            prevModalDialog.classList.add('show');            prevModalDialog.classList.remove('hide');            closeModal();        }, 4000);    }    // fetch('http://localhost:3000/menu')    //     .then(data => data.json())    //     .then(res => console.log(res));// SLIDERconst slides = document.querySelectorAll('.offer__slide'),    slider = document.querySelector('.offer__slider'),    prev = document.querySelector('.offer__slider-prev'),    next = document.querySelector('.offer__slider-next'),    total = document.querySelector('#total'),    current = document.querySelector('#current'),    slidesWrapper = document.querySelector('.offer__slider-wrapper'), //    slidesField = document.querySelector('.offer__slider-inner'),     // для второго варианта    width = window.getComputedStyle(slidesWrapper).width;                       //    let slideIndex = 1;    let offset = 0; // для второго варианта    if (slides.length < 10) {        total.textContent = `0${slides.length}`;        current.textContent = `0${slideIndex}`;    } else {        total.textContent = slides.length;        current.textContent = slideIndex;    }    //второй вариант слайдера    slidesField.style.width = 100 * slides.length + '%';    slidesField.style.display = 'flex';    slidesField.style.transition = '0.5s all';    slidesWrapper.style.overflow = 'hidden';    slides.forEach(slide => {        slide.style.width = width;    })    slider.style.position = 'relative';    const dots = document.createElement('ol'),        indicators = [];    dots.classList.add('carousel-indicators');    dots.style.cssText = `        position: absolute;        right: 0;        bottom: 0;        left: 0;        z-index: 15;        display: flex;        justify-content: center;        margin-right: 15%;        margin-left: 15%;        list-style: none;    `;    slider.append(dots);    for (let i = 0; i < slides.length; i++) {        const dot = document.createElement('li');        dot.setAttribute('data-slide-to', i + 1);        dot.style.cssText = `            box-sizing: content-box;            flex: 0 1 auto;            width: 30px;            height: 6px;            margin-right: 3px;            margin-left: 3px;            cursor: pointer;            background-color: #fff;            background-clip: padding-box;            border-top: 10px solid transparent;            border-bottom: 10px solid transparent;            opacity: .5;            transition: opacity .6s ease;        `;        if (i === 0) {            dot.style.opacity = 1;        }        dots.append(dot);        indicators.push(dot);    }    function deleteNotDigits(str) {        return +str.replace(/\D/g, '');    }        next.addEventListener('click', () => {            if (offset === deleteNotDigits(width) * (slides.length - 1)) {                offset = 0;            } else {                offset += deleteNotDigits(width);            }            slidesField.style.transform = `translateX(-${offset}px)`;            if (slideIndex === slides.length) {                slideIndex = 1;            } else {                slideIndex++;            }            if (slides.length < 10) {                current.textContent = `0${slideIndex}`;            } else {                current.textContent = slideIndex;            }            indicators.forEach(dot => dot.style.opacity = '.5');            indicators[slideIndex - 1].style.opacity = 1;        });        prev.addEventListener('click', () => {            if (offset === 0) {                offset = deleteNotDigits(width) * (slides.length - 1);            } else {                offset -= deleteNotDigits(width);            }            slidesField.style.transform = `translateX(-${offset}px)`;            if (slideIndex === 1) {                slideIndex = slides.length;            } else {                slideIndex--;            }            if (slides.length < 10) {                current.textContent = `0${slideIndex}`;            } else {                current.textContent = slideIndex;            }            indicators.forEach(dot => dot.style.opacity = '.5');            indicators[slideIndex - 1].style.opacity = 1;        });        indicators.forEach(dot => {            dot.addEventListener('click', (e) => {                const slideTo = e.target.getAttribute('data-slide-to');                slideIndex = slideTo;                offset = deleteNotDigits(width) * (slideTo - 1);                slidesField.style.transform = `translateX(-${offset}px)`;                if (slides.length < 10) {                    current.textContent = `0${slideIndex}`;                } else {                    current.textContent = slideIndex;                }                indicators.forEach(dot => dot.style.opacity = '.5');                indicators[slideIndex - 1].style.opacity = 1;            });            // CALCULATE            const result = document.querySelector('.calculating__result span');            let sex = height, weight, age, ratio;            if (localStorage.getItem('sex')) {                sex = localStorage.getItem('sex');            } else {                sex = 'female';                localStorage.setItem('sex', 'female');            }            if (localStorage.getItem('ratio')) {                ratio = localStorage.getItem('ratio');            } else {                ratio = 1.375;                localStorage.setItem('ratio', 1.375);            }            function initLocalSettings(selector, activeClass) {                const elements = document.querySelectorAll(selector);                elements.forEach(elem => {                    elem.classList.remove(activeClass);                    if (elem.getAttribute('id') === localStorage.getItem('sex')) {                        elem.classList.add(activeClass);                    }                    if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')) {                        elem.classList.add(activeClass);                    }                });            }            initLocalSettings('#gender div', 'calculating__choose-item_active');            initLocalSettings('.calculating__choose_big div', 'calculating__choose-item_active');            function calcTotal () {                if (!sex || !height || !weight || !age || !ratio) {                    result.textContent = '____';                    return;                }                if (sex === 'female') {                    result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio);                } else {                    result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio);                }            }            calcTotal();            function getStaticInformation(parentSelector, activeClass) {                const elements = document.querySelectorAll(`${parentSelector} div`);                elements.forEach(elem => {                    elem.addEventListener('click', (e) => {                        if (e.target.getAttribute('data-ratio')) {                            ratio = +e.target.getAttribute('data-ratio');                            localStorage.setItem('ratio', +e.target.getAttribute('data-ratio'));                        } else {                            sex = e.target.getAttribute('id');                            localStorage.setItem('sex', e.target.getAttribute('id'));                        }                        elements.forEach(elem => {                            elem.classList.remove(activeClass);                        });                        e.target.classList.add(activeClass);                        calcTotal();                    })                })            }            getStaticInformation('#gender', 'calculating__choose-item_active');            getStaticInformation('.calculating__choose_big', 'calculating__choose-item_active');            function getDynamicInformation(selector) {                const input = document.querySelector(selector);                input.addEventListener('input', () => {                    if (input.value.match(/\D/g)) {                        input.style.border = '1px solid red';                    } else {                        input.style.border = 'none';                    }                    if (input.value.match(/\D/g)) {                        input.style.border = '1px solid red';                    } else {                        input.style.border = 'none';                    }                    switch (input.getAttribute('id')) {                        case 'height':                            height = +input.value;                            break;                        case 'weight':                            weight = +input.value;                            break;                        case 'age':                            age = +input.value;                            break;                    }                    calcTotal();                });            }            getDynamicInformation('#height');            getDynamicInformation('#weight');            getDynamicInformation('#age');        });        //первый вариант слайдера        // showSlides(slideIndex);        //        // if (slides.length < 10) {        //     total.textContent = `0${slides.length}`;        // } else {        //     total.textContent = slides.length;        // }        //        // function showSlides(n) {        //     if (n > slides.length) {        //         slideIndex = 1;        //     }        //     if (n < 1) {        //         slideIndex = slides.length;        //     }        //     slides.forEach(item => item.style.display = 'none');        //     slides[slideIndex - 1].style.display = 'block';        //        //     if (slides.length < 10) {        //         current.textContent = `0${slideIndex}`;        //     } else {        //         current.textContent = slideIndex;        //     }        // }        // function plusSlides(n) {        //     showSlides(slideIndex += n);        // }        // prev.addEventListener('click', () => {        //     plusSlides(-1);        // });        // next.addEventListener('click', () => {        //     plusSlides(1);        //        // })});//code for date and time// const now = new Date();// console.log(now.getFullYear()); // get year// console.log(now.getMonth()); // get month// console.log(now.getDate()); // get day// console.log(now.getHours()); // get hours// console.log(now.getMinutes()); // get minutes// console.log(now.getSeconds()); // get seconds// console.log(now.getMilliseconds()); // get milliseconds// console.log(now.getDay()); // get week day// console.log(now.getUTCHours()); // get UTC hours// console.log(now.getTimezoneOffset()); // get time zone// console.log(now.getTime()); // get time//// console.log(now.setHours(20)); // set hours// console.log(now.setMinutes(20)); // set minutes// console.log(now.setSeconds(20)); // set seconds// let start = new Date();// for (let i = 0; i < 10000; i++) {//     let some = i * 3.14;// }// let end = new Date();// alert(`Цикл отработал за ${end - start} мс`);// PROMISE// const promise = new Promise((resolve, reject) => {//     let condition = true;//     if (condition) {//         resolve('resolve');//     } else {//         reject('reject');//     }// });//// promise//     .then(result => console.log(result))//     .catch(error => console.error(error));//     .finally(() => console.log('finally'));// const test = time => {//     return new Promise((resolve, reject) => {//         setTimeout(() => {//             console.log(time);//             resolve();//         }, time);//     });// };//// test(1000)//     .then(() => test(2000))//     .then(() => test(3000));// Promise.all([test(1000), test(2000), test(3000)]).then(() => console.log('all'));// Promise.race([test(1000), test(2000), test(3000)]).then(() => console.log('race'));// fetch('https://jsonplaceholder.typicode.com/posts', {//     method: 'POST',//     body: JSON.stringify({name: 'Alex'}),//     headers: {//         'Content-type': 'application/json'//     }// })//     .then(response => response.json())//     .then(json => console.log(json))// METHODS//filter позволяет выбрать элементы массива//const names = ['John', 'Pete', 'Alice', 'Bob', 'Jack', 'Alexandr'];//const shortNames = names.filter(name => name.length < 5);//console.log(shortNames);//map позволяет изменять элементы массива//const names = ['John', 'Pete', 'Alice', 'Bob', 'Jack', 'Alexandr'];//const shortNames = names.map(name => name.toLowerCase());//console.log(shortNames);//every/some позволяют проверить один или все элементы массива на определенное условие//const names = ['John', 'Pete', 'Alice', 'Bob', 'Jack', 'Alexandr'];//const shortNames = names.some(name => name.typeof(name) === 'string');//console.log(shortNames);////const names = ['John', 'Pete', '555', 'Bob', 'Jack', '222'];//const shortNames = names.every(name => name.typeof(name) === 'string');//console.log(shortNames);//reduce позволяет собрать все элементы массива в один//const arr = [1, 2, 3, 4, 5];//const result = arr.reduce((sum, current) => sum + current, 0);//console.log(result);// const obj = {  //объект//     alex: 'person',//     ann: 'person',//     dog: 'animal',//     cat: 'animal'// };//// const entries = Object.entries(obj) //преобразует объект в массив// .filter(item => item[1] === 'person') //фильтруем по значению 'person'// .map(item => item[0]); // получаем ключ объекта имя// console.log(entries);//LOCAL STORAGE// localStorage.setItem('number', 5);  //запись в локальное хранилище//localStorage.getItem('number'); // чтение из локального хранилища// localStorage.removeItem('number'); // удаление из локального хранилища// localStorage.clear(); // очистка локального хранилища
=======
import tabs from './modules/tabs';import modal from './modules/modals';import timer from './modules/timer';import cards from './modules/cards';import slider from './modules/sliders';import calc from './modules/calculate';import forms from './modules/forms';window.addEventListener('DOMContentLoaded', function() {    const modalTimerId = setTimeout(() => openModal('.modal', modalTimerId), 50000);    tabs('.tabheader__item', '.tabcontent', '.tabheader__items', 'tabheader__item_active');    modal('[data-modal]', '.modal', modalTimerId);    timer('.timer', '2025-06-11');    cards();    calc();    forms('form', modalTimerId);    slider({        container: '.offer__slider',        slide: '.offer__slide',        nextArrow: '.offer__slider-next',        prevArrow: '.offer__slider-prev',        totalCounter: '#total',        currentCounter: '#current',        wrapper: '.offer__slider-wrapper',        field: '.offer__slider-inner'    });});
>>>>>>> 5c1f36f (add update)
